

import java.io.IOException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;

import javax.inject.Inject;
import javax.inject.Named;

import net.sf.jasperreports.engine.JRException;

import org.apache.commons.lang3.StringUtils;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.philips.ichm.common.criteria.DynamicSearchCriteria;
import com.philips.ichm.common.dto.ContactPersonDTO;
import com.philips.ichm.common.dto.PatientDTO;
import com.philips.ichm.common.entity.Contact;
import com.philips.ichm.common.entity.ContactPerson;
import com.philips.ichm.common.entity.Identity;
import com.philips.ichm.common.entity.Patient;
import com.philips.ichm.common.result.EntityResult;
import com.philips.ichm.common.result.ListResult;
import com.philips.ichm.common.result.Result;
import com.philips.ichm.common.service.PatientService;
import com.philips.ichm.core.exception.BusinessException;
import com.philips.ichm.core.resource.service.LanguageResourceServcie;
import com.philips.ichm.integration.dto.EncounterView;
import com.philips.ichm.integration.dto.PatientView;
import com.philips.ichm.logging.Logger;
import com.philips.ichm.logging.impl.LogManager;
import com.philips.ichm.organization.entity.Practitioner;
import com.philips.ichm.report.service.JasperReportService;
import com.philips.ichm.report.service.ReportDataService;
import com.philips.ichm.scheduler.careplan.entity.CarePlan;
import com.philips.ichm.scheduler.careplan.entity.RequestedFollowup;
import com.philips.ichm.scheduler.common.dto.AppointmentDTO;
import com.philips.ichm.scheduler.common.dto.RequestedFollowupDTO;
import com.philips.ichm.scheduler.service.AppointmentService;
import com.philips.ichm.scheduler.workday.exception.TimeslotOverCapacityException;
import com.philips.ichm.security.annotation.Permission;
import com.philips.ichm.security.exception.LackParameterException;
import com.philips.ichm.workflow.entity.Appointment;
import com.philips.ichm.workflow.entity.Calendar;
import com.philips.ichm.workflow.entity.Encounter;
import com.philips.ichm.workflow.entity.Order;
import com.philips.ichm.workflow.entity.Timeslot;
import com.philips.ichm.workflow.entity.TimeslotDef;
import com.philips.ichm.workflow.service.EncounterService;

/**
 * AppointmentController
 * 
 * @author $Author: $
 * @version $Revision: $
 * @since $Date: $
 */
@RestController
@RequestMapping("/scheduler/appointment")
public class AppointmentController {
	
	private String msgStorePath;
	
	private int msgStoreDays;
	
	private MessageType msgType;
	
	private int retryDelay;
	
	private int retryTimes;
	
	private int retryInterval;
	
	private boolean isAsync;
	
	private boolean isBlock;
	
	private String msgSendUrl;
	
	private String msgSendClass;
	
	private String msgSendMethod;
	
	private String msgSendDir;
	
	private String msgScanDir;
	
	private CallbackType callbackType;
	
	private String callbackUrl;
	
	private String callbackHost;
	
	private String callbackPort;
	
	private String callbackContextPath;
	
	private String callbackServletPath;
	
	private String callbackService;
	
	private String callbackClass;
	
	private String callbackUnmarshalClass;
	
	private String callbackMethod;
	
	private String callbackBrokerUrl;
	
	private String callbackQueue;
	
	private boolean callbackReturnResult;
	
	public String getMsgSendClass() {
		return msgSendClass;
	}
	
	public void setMsgSendClass(String msgSendClass) {
		this.msgSendClass = msgSendClass;
	}
	
	public String getMsgSendMethod() {
		return msgSendMethod;
	}
	
	public void setMsgSendMethod(String msgSendMethod) {
		this.msgSendMethod = msgSendMethod;
	}
	
	public String getMsgSendDir() {
		return msgSendDir;
	}
	
	public void setMsgSendDir(String msgSendDir) {
		this.msgSendDir = msgSendDir;
	}
	
	public String getMsgScanDir() {
		return msgScanDir;
	}
	
	public void setMsgScanDir(String msgScanDir) {
		this.msgScanDir = msgScanDir;
	}
	
	public String getMsgStorePath() {
		return msgStorePath;
	}
	
	public void setMsgStorePath(String msgStorePath) {
		this.msgStorePath = msgStorePath;
	}
	
	public int getMsgStoreDays() {
		return msgStoreDays;
	}
	
	public void setMsgStoreDays(int msgStoreDays) {
		this.msgStoreDays = msgStoreDays;
	}
	
	public MessageType getMsgType() {
		return msgType;
	}
	
	public void setMsgType(MessageType msgType) {
		this.msgType = msgType;
	}
	
	public int getRetryDelay() {
		return retryDelay;
	}
	
	public void setRetryDelay(int retryDelay) {
		this.retryDelay = retryDelay;
	}
	
	public int getRetryTimes() {
		return retryTimes;
	}
	
	public void setRetryTimes(int retryTimes) {
		this.retryTimes = retryTimes;
	}
	
	public int getRetryInterval() {
		return retryInterval;
	}
	
	public void setRetryInterval(int retryInterval) {
		this.retryInterval = retryInterval;
	}
	
	public boolean isAsync() {
		return isAsync;
	}
	
	public void setAsync(boolean isAsync) {
		this.isAsync = isAsync;
	}
	
	public boolean isBlock() {
		return isBlock;
	}
	
	public void setBlock(boolean isBlock) {
		this.isBlock = isBlock;
	}
	
	public String getMsgSendUrl() {
		return msgSendUrl;
	}
	
	public void setMsgSendUrl(String msgSendUrl) {
		this.msgSendUrl = msgSendUrl;
	}
	
	public CallbackType getCallbackType() {
		return callbackType;
	}
	
	public void setCallbackType(CallbackType callbackType) {
		this.callbackType = callbackType;
	}
	
	public String getCallbackUrl() {
		return callbackUrl;
	}
	
	public void setCallbackUrl(String callbackUrl) {
		this.callbackUrl = callbackUrl;
	}
	
	public String getCallbackHost() {
		return callbackHost;
	}
	
	public void setCallbackHost(String callbackHost) {
		this.callbackHost = callbackHost;
	}
	
	public String getCallbackPort() {
		return callbackPort;
	}
	
	public void setCallbackPort(String callbackPort) {
		this.callbackPort = callbackPort;
	}
	
	public String getCallbackContextPath() {
		return callbackContextPath;
	}
	
	public void setCallbackContextPath(String callbackContextPath) {
		this.callbackContextPath = callbackContextPath;
	}
	
	public String getCallbackServletPath() {
		return callbackServletPath;
	}
	
	public void setCallbackServletPath(String callbackServletPath) {
		this.callbackServletPath = callbackServletPath;
	}
	
	public String getCallbackService() {
		return callbackService;
	}
	
	public void setCallbackService(String callbackService) {
		this.callbackService = callbackService;
	}
	
	public String getCallbackClass() {
		return callbackClass;
	}
	
	public void setCallbackClass(String callbackClass) {
		this.callbackClass = callbackClass;
	}
	
	public String getCallbackUnmarshalClass() {
		return callbackUnmarshalClass;
	}
	
	public void setCallbackUnmarshalClass(String callbackUnmarshalClass) {
		this.callbackUnmarshalClass = callbackUnmarshalClass;
	}
	
	public String getCallbackMethod() {
		return callbackMethod;
	}
	
	public void setCallbackMethod(String callbackMethod) {
		this.callbackMethod = callbackMethod;
	}
	
	public String getCallbackBrokerUrl() {
		return callbackBrokerUrl;
	}
	
	public void setCallbackBrokerUrl(String callbackBrokerUrl) {
		this.callbackBrokerUrl = callbackBrokerUrl;
	}
	
}
